Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 6

  |                                                                          |   0%

| In this lesson, we'll see how to extract elements from a vector based on some
| conditions that we specify.

...

  |==                                                                        |   3%
| For example, we may only be interested in the first 20 elements of a vector, or
| only the elements that are not NA, or only those that are positive or correspond
| to a specific variable of interest. By the end of this lesson, you'll know how to
| handle each of these scenarios.

...

  |====                                                                      |   5%
| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see what
| it looks like.

> x
 [1] -0.2385880 -0.4467622 -0.6748656  0.9742992  1.0297481         NA         NA
 [8]         NA         NA  0.1234197         NA         NA -0.1406670 -0.1749201
[15]         NA -1.2211583         NA -0.1426148         NA  0.2332220 -0.3213653
[22]         NA         NA         NA  1.6032091 -1.1611888 -0.1476201  1.1289806
[29]         NA -0.7717009         NA         NA  0.8554141         NA         NA
[36]  0.6756421         NA  0.9624374         NA         NA

| Excellent work!

  |======                                                                    |   8%
| The way you tell R that you want to select some particular elements (i.e. a
| 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

...

  |========                                                                  |  10%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1] -0.2385880 -0.4467622 -0.6748656  0.9742992  1.0297481         NA         NA
 [8]         NA         NA  0.1234197

| Your dedication is inspiring!

  |=========                                                                 |  13%
| Index vectors come in four different flavors -- logical vectors, vectors of
| positive integers, vectors of negative integers, and vectors of character strings
| -- each of which we'll cover in this lesson.

...

  |===========                                                               |  15%
| Let's start by indexing with logical vectors. One common scenario when working
| with real-world data is that we want to extract all elements of a vector that are
| not NA (i.e. missing data). Recall that is.na(x) yields a vector of logical
| values the same length as x, with TRUEs corresponding to NA values in x and
| FALSEs corresponding to non-NA values in x.

...

  |=============                                                             |  18%
| What do you think x[is.na(x)] will give you?

1: A vector with no NAs
2: A vector of all NAs
3: A vector of length 0
4: A vector of TRUEs and FALSEs

Selection: 2

| All that practice is paying off!

  |===============                                                           |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| Keep working like that and you'll get there!

  |=================                                                         |  23%
| Recall that `!` gives us the negation of a logical expression, so !is.na(x) can
| be read as 'is not NA'. Therefore, if we want to create a vector called y that
| contains all of the non-NA values from x, we can use y <- x[!is.na(x)]. Give it a
| try.

> y <- x[!is.na(x)]

| You got it!

  |===================                                                       |  26%
| Print y to the console.

> y
 [1] -0.2385880 -0.4467622 -0.6748656  0.9742992  1.0297481  0.1234197 -0.1406670
 [8] -0.1749201 -1.2211583 -0.1426148  0.2332220 -0.3213653  1.6032091 -1.1611888
[15] -0.1476201  1.1289806 -0.7717009  0.8554141  0.6756421  0.9624374

| You are doing so well!

  |=====================                                                     |  28%
| Now that we've isolated the non-missing values of x and put them in y, we can
| subset y as we please.

...

  |=======================                                                   |  31%
| Recall that the expression y > 0 will give us a vector of logical values the same
| length as y, with TRUEs corresponding to values of y that are greater than zero
| and FALSEs corresponding to values of y that are less than or equal to zero. What
| do you think y[y > 0] will give you?

1: A vector of all NAs
2: A vector of length 0
3: A vector of TRUEs and FALSEs
4: A vector of all the positive elements of y
5: A vector of all the negative elements of y

Selection: 4

| Excellent work!

  |=========================                                                 |  33%
| Type y[y > 0] to see that we get all of the positive elements of y, which are
| also the positive elements of our original vector x.

> y[y>0]
[1] 0.9742992 1.0297481 0.1234197 0.2332220 1.6032091 1.1289806 0.8554141 0.6756421
[9] 0.9624374

| You are amazing!

  |===========================                                               |  36%
| You might wonder why we didn't just start with x[x > 0] to isolate the positive
| elements of x. Try that now to see why.

> x[x>0]
 [1] 0.9742992 1.0297481        NA        NA        NA        NA 0.1234197        NA
 [9]        NA        NA        NA        NA 0.2332220        NA        NA        NA
[17] 1.6032091 1.1289806        NA        NA        NA 0.8554141        NA        NA
[25] 0.6756421        NA 0.9624374        NA        NA

| You're the best!

  |============================                                              |  38%
| Since NA is not a value, but rather a placeholder for an unknown quantity, the
| expression NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in with our
| positive numbers when we do this.

...

  |==============================                                            |  41%
| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> 
> x[!is.na(x) & x > 0]
[1] 0.9742992 1.0297481 0.1234197 0.2332220 1.6032091 1.1289806 0.8554141 0.6756421
[9] 0.9624374

| Keep up the great work!

  |================================                                          |  44%
| In this case, we request only values of x that are both non-missing AND greater
| than zero.

...

  |==================================                                        |  46%
| I've already shown you how to subset just the first ten values of x using
| x[1:10]. In this case, we're providing a vector of positive integers inside of
| the square brackets, which tells R to return only the elements of x numbered 1
| through 10.

...

  |====================================                                      |  49%
| Many programming languages use what's called 'zero-based indexing', which means
| that the first element of a vector is considered element 0. R uses 'one-based
| indexing', which (you guessed it!) means the first element of a vector is
| considered element 1.

...

  |======================================                                    |  51%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint --
| Use the c() function to specify the element numbers as a numeric vector.


| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the square
| brackets.

> x[c(3, 5, 7)]
[1]  7 NA NA

| Nice work!

  |========================================                                  |  54%
| It's important that when using integer vectors to subset our vector x, we stick
| with the set of indexes {1, 2, ..., 40} since x only has 40 elements. What
| happens if we ask for the zeroth element of x (i.e. x[0])? Give it a try.

> 
> x
[1] 3 5 7

| Not quite! Try again. Or, type info() for more options.

| Try x[0] to see what happens when we refer to the zeroth element of a vector,
| which is not defined in R.

> x[0]
numeric(0)

| You nailed it! Good job!

  |==========================================                                |  56%
| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us
| from doing this. What if we ask for the 3000th element of x? Try it out.

> 
> x
[1] 3 5 7

| Keep trying! Or, type info() for more options.

| Request the 3000th element of x (which does not exist) with x[3000].

> x[3000]
[1] NA

| Great job!

  |============================================                              |  59%
| Again, nothing useful, but R doesn't prevent us from asking for it. This should
| be a cautionary tale. You should always make sure that what you are asking for is
| within the bounds of the vector you're working with.

...

  |==============================================                            |  62%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would
| be pretty tedious to construct a vector containing all numbers 1 through 40
| EXCEPT 2 and 10.

...

  |===============================================                           |  64%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY
| the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT
| for the 2nd and 10 elements.  Try x[c(-2, -10)] now to see this.

> x[c(-2, -10)] 
[1] 3 7

| You got it!

  |=================================================                         |  67%
| A shorthand way of specifying multiple negative numbers is to put the negative
| sign out in front of the vector of positive numbers. Type x[-c(2, 10)] to get the
| exact same result.

> x[-c(2, 10)] 
[1] 3 7

| Excellent job!

  |===================================================                       |  69%
| So far, we've covered three types of index vectors -- logical, positive integer,
| and negative integer. The only remaining type requires us to introduce the
| concept of 'named' elements.

...

  |=====================================================                     |  72%
| Create a numeric vector with three named elements using vect <- c(foo = 11, bar =
| 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| All that practice is paying off!

  |=======================================================                   |  74%
| When we print vect to the console, you'll see that each element has a name. Try
| it out.

> vect
 foo  bar norf 
  11    2   NA 

| Your dedication is inspiring!

  |=========================================================                 |  77%
| We can also get the names of vect by passing vect as an argument to the names()
| function. Give that a try.

> names()
Error in names() : 0 arguments passed to 'names' which requires 1
> names(vect)
[1] "foo"  "bar"  "norf"

| You nailed it! Good job!

  |===========================================================               |  79%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that
| now.

> vect<- c(11,2,NA)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Create an ordinary (unnamed) vector called vect2 that contains c(11, 2, NA).

> vect2<- c(11,2,NA)

| All that hard work is paying off!

  |=============================================================             |  82%
| Then, we can add the `names` attribute to vect2 after the fact with names(vect2)
| <- c("foo", "bar", "norf"). Go ahead.

> names(vect2)
NULL

| Almost! Try again. Or, type info() for more options.

| Add names to vect2 with names(vect2) <- c("foo", "bar", "norf").

> vect2<- c("foo","bar","norf")

| One more time. You can do it! Or, type info() for more options.

| Add names to vect2 with names(vect2) <- c("foo", "bar", "norf").

> names(vect2)<- c("foo","bar","norf")

| Excellent job!

  |===============================================================           |  85%
| Now, let's check that vect and vect2 are the same by passing them as arguments to
| the identical() function.

> identical()
Error in identical() : argument "x" is missing, with no default
> identical(vect2)
Error in identical(vect2) : argument "y" is missing, with no default
> vect
[1] 11  2 NA

| That's not the answer I was looking for, but try again. Or, type info() for more
| options.

| The identical() function tells us if its first two arguments are, well,
| identical.

> vect2
 foo  bar norf 
  11    2   NA 

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The identical() function tells us if its first two arguments are, well,
| identical.

> identical(vect,vect2)
[1] TRUE

| All that practice is paying off!

  |=================================================================         |  87%
| Indeed, vect and vect2 are identical named vectors.

...

  |==================================================================        |  90%
| Now, back to the matter of subsetting a vector by named elements. Which of the
| following commands do you think would give us the second element of vect?

1: vect[bar]
2: vect["bar"]
3: vect["2"]

Selection: 3

| Not quite, but you're learning! Try again.

| If we want the element named "bar" (i.e. the second element of vect), which
| command would get us that?

1: vect["bar"]
2: vect[bar]
3: vect["2"]

Selection: 
Enter an item from the menu, or 0 to exit
Selection: 1

| You nailed it! Good job!

  |====================================================================      |  92%
| Now, try it out.

> vect["bar"]
bar 
  2 

| You are doing so well!

  |======================================================================    |  95%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it
| out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| That's the answer I was looking for.

  |========================================================================  |  97%
| Now you know all four methods of subsetting data from vectors. Different
| approaches are best in different scenarios and when in doubt, try it out!

...
